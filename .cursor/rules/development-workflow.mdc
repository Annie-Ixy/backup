---
description: 
globs: 
alwaysApply: false
---
# 开发工作流指南

## 环境配置

### 系统要求
- Node.js 16+
- npm 或 yarn
- OpenAI API Key

### 初始化项目
```bash
# 安装所有依赖
npm run install-all

# 配置环境变量
# 在server目录下创建.env文件
```

### 环境变量配置
在 [server/.env](mdc:server/.env) 文件中配置:
```
OPENAI_API_KEY=your_openai_api_key_here
PORT=5000
NODE_ENV=development
```

## 开发命令

### 启动开发环境
```bash
# 同时启动前后端 (推荐)
npm run dev

# 分别启动
npm run server  # 后端 (端口5000)
npm run client  # 前端 (端口3000)
```

### 构建和部署
```bash
# 构建前端
npm run build

# 生产环境启动
cd server && npm start
```

## 项目结构导航

### 关键配置文件
- [package.json](mdc:package.json) - 根目录依赖和脚本
- [server/package.json](mdc:server/package.json) - 后端依赖
- [client/package.json](mdc:client/package.json) - 前端依赖
- [server/config.js](mdc:server/config.js) - 后端配置

### 开发文档
- [README.md](mdc:README.md) - 项目完整文档
- [client/ROUTES.md](mdc:client/ROUTES.md) - 前端路由说明
- [client/PORT_CONFIG.md](mdc:client/PORT_CONFIG.md) - 端口配置说明

## 调试技巧

### 后端调试
- 查看 [server/index.js](mdc:server/index.js) 中的console.log输出
- 检查uploads目录中的文件处理情况
- 验证OpenAI API调用状态

### 前端调试
- 使用浏览器开发者工具
- 检查网络请求到后端API
- 查看React组件状态和props

### 常见问题排查
1. **API调用失败**: 检查OpenAI API Key和余额
2. **PDF解析失败**: 确认PDF文件格式和编码
3. **文件上传失败**: 检查文件大小和ZIP格式
4. **前后端连接问题**: 确认端口配置和CORS设置

## 代码规范

### 文件命名
- 组件文件使用PascalCase: `FileUpload.js`
- 页面文件使用PascalCase: `Home.js`
- 配置文件使用kebab-case: `config.js`

### 组件结构
- 功能组件优先使用React Hooks
- 保持组件单一职责
- 合理使用props和state

### API设计
- RESTful API设计原则
- 统一的错误处理
- 适当的HTTP状态码

## 测试和验证

### 功能测试
- 使用 [test-with-existing-resumes.js](mdc:test-with-existing-resumes.js) 进行简历处理测试
- 验证文件上传和解析功能
- 测试AI分析结果准确性

### 性能监控
- 监控API响应时间
- 检查内存使用情况
- 优化大文件处理性能

